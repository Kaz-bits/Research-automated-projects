# Load data
df1_sparrow <- read.csv(file = "C:/Users/Cesar/OneDrive/Escritorio/Ext.Fig1/DATA/ARTICLE/IDRBS_library_sparrow_188.csv",
header = TRUE)
# Remove IDRs with medium response
df1_sparrow <- df1_sparrow[!df1_sparrow$Response == "Medium", ]
# Convert data to factor
df1_sparrow$Response <- as.factor(df1_sparrow$Response)
# Perform shapiro test to check normality
shapiro.test(df1_sparrow[df1_sparrow$Response == "High", ]$polar) # p-value > 0.05 we assume normality
shapiro.test(df1_sparrow[df1_sparrow$Response == "Low", ]$polar) # p-value > 0.05 we assume normality
# Check homocedasticity
leveneTest(df1_sparrow$polar ~ df1_sparrow$Response) # p-value > 0.05 imply homocedasticity
# Packages
library(ggplot2)
library(ggpubr)
library(car)
# Load data
df1_sparrow <- read.csv(file = "C:/Users/Cesar/OneDrive/Escritorio/Ext.Fig1/DATA/ARTICLE/IDRBS_library_sparrow_188.csv",
header = TRUE)
# Remove IDRs with medium response
df1_sparrow <- df1_sparrow[!df1_sparrow$Response == "Medium", ]
# Convert data to factor
df1_sparrow$Response <- as.factor(df1_sparrow$Response)
# Perform shapiro test to check normality
shapiro.test(df1_sparrow[df1_sparrow$Response == "High", ]$polar) # p-value > 0.05 we assume normality
shapiro.test(df1_sparrow[df1_sparrow$Response == "Low", ]$polar) # p-value > 0.05 we assume normality
# Check homocedasticity
leveneTest(df1_sparrow$polar ~ df1_sparrow$Response) # p-value > 0.05 imply homocedasticity
# Statistics
p1 <- t.test(df1_sparrow$polar ~ df1_sparrow$Response)[[3]] # Extract p-value
# Significance level
signif_level <- c(ns = 1, "*" = 0.05, "**" = 0.01,
"***" = 0.001, "****" = 0.0001)
# Merge p-values for each condition
a <- c(p1)
# Evaluate p-values
i <- c(a[1] > 0.05, a[1] <= 0.05, a[1] <= 0.01, a[1] <= 0.001, a[1] <= 0.0001)
# Extract significance values from p-values
p1_box <- (names(signif_level[i]))[length((names(signif_level[i])))] # p1
# Plot ----
## polar ----
f1 <- ggplot(data = df1_sparrow, aes(x = Response, y = polar, color = Response)) +
geom_violin(show.legend = FALSE, width = 0.5) +
geom_point(show.legend = FALSE, alpha = 0.3) +
geom_rect(xmin = 1, xmax = 2, ymin = 0.78, ymax = 0.78, linewidth = 0.1,
show.legend = FALSE, color = "black") +
theme_classic() +
labs(x = NULL, y = "polar") +
theme(axis.title = element_text(size = 14),
axis.text = element_text(size = 12)) +
coord_cartesian(ylim = c(0, 0.8)) +
scale_x_discrete(label = c("Hypersensitive", "Insensitive")) +
scale_color_manual(values = c("#ff0000", "#0c00ff")) +
annotate(geom = "text", x = 1.5, y = 0.8, label = p1_box)
f1
# Perform shapiro test to check normality
shapiro.test(df1_sparrow[df1_sparrow$Response == "High", ]$aliphatic) # p-value > 0.05 we assume normality
shapiro.test(df1_sparrow[df1_sparrow$Response == "Low", ]$aliphatic) # p-value < 0.05 we do not assume normality ***
# Check homocedasticity
leveneTest(df1_sparrow$aliphatic ~ df1_sparrow$Response) # p-value < 0.05 do not imply homocedasticity ***
# Statistics
p1 <- wilcox.test(df1_sparrow$aliphatic ~ df1_sparrow$Response)[[3]] # Extract p-value
# Merge p-values for each condition
a <- c(p1)
# Evaluate p-values
i <- c(a[1] > 0.05, a[1] <= 0.05, a[1] <= 0.01, a[1] <= 0.001, a[1] <= 0.0001)
# Extract significance values from p-values
p1_box <- (names(signif_level[i]))[length((names(signif_level[i])))] # p1
# Plot ----
## aliphatic ----
f2 <- ggplot(data = df1_sparrow, aes(x = Response, y = aliphatic, color = Response)) +
geom_violin(show.legend = FALSE, width = 0.5) +
geom_point(show.legend = FALSE, alpha = 0.3) +
geom_rect(xmin = 1, xmax = 2, ymin = 0.49, ymax = 0.49, linewidth = 0.1,
show.legend = FALSE, color = "black") +
theme_classic() +
labs(x = NULL, y = "aliphatic") +
theme(axis.title = element_text(size = 14),
axis.text = element_text(size = 12)) +
coord_cartesian(ylim = c(0, 0.5)) +
scale_x_discrete(label = c("Hypersensitive", "Insensitive")) +
scale_color_manual(values = c("#ff0000", "#0c00ff")) +
annotate(geom = "text", x = 1.5, y = 0.5, label = p1_box)
f2
# Perform shapiro test to check normality
shapiro.test(df1_sparrow[df1_sparrow$Response == "High", ]$aromatic) # p-value < 0.05 we do not assume normality ***
shapiro.test(df1_sparrow[df1_sparrow$Response == "Low", ]$aromatic) # p-value > 0.05 we assume normality
# Check homocedasticity
leveneTest(df1_sparrow$aromatic ~ df1_sparrow$Response) # p-value < 0.05 we do not imply homocedasticity ***
# Statistics
p1 <- wilcox.test(df1_sparrow$aromatic ~ df1_sparrow$Response)[[3]] # Extract p-value
# Merge p-values for each condition
a <- c(p1)
# Evaluate p-values
i <- c(a[1] > 0.05, a[1] <= 0.05, a[1] <= 0.01, a[1] <= 0.001, a[1] <= 0.0001)
# Extract significance values from p-values
p1_box <- (names(signif_level[i]))[length((names(signif_level[i])))] # p1
# Plot ----
## aromatic ----
f3 <- ggplot(data = df1_sparrow, aes(x = Response, y = aromatic, color = Response)) +
geom_violin(show.legend = FALSE, width = 0.5) +
geom_point(show.legend = FALSE, alpha = 0.3) +
geom_rect(xmin = 1, xmax = 2, ymin = 0.153, ymax = 0.153, linewidth = 0.1,
show.legend = FALSE, color = "black") +
theme_classic() +
labs(x = NULL, y = "aromatic") +
theme(axis.title = element_text(size = 14),
axis.text = element_text(size = 12)) +
coord_cartesian(ylim = c(0, 0.16)) +
scale_x_discrete(label = c("Hypersensitive", "Insensitive")) +
scale_color_manual(values = c("#ff0000", "#0c00ff")) +
annotate(geom = "text", x = 1.5, y = 0.16, label = p1_box)
f3
# Perform shapiro test to check normality
shapiro.test(df1_sparrow[df1_sparrow$Response == "High", ]$SCD) # p-value < 0.05 we do not assume normality ***
shapiro.test(df1_sparrow[df1_sparrow$Response == "Low", ]$SCD) # p-value < 0.05 we do not assume normality ***
# Check homocedasticity
leveneTest(df1_sparrow$SCD ~ df1_sparrow$Response) # p-value < 0.05 we do not imply homocedasticity ***
# Statistics
p1 <- wilcox.test(df1_sparrow$SCD ~ df1_sparrow$Response)[[3]] # Extract p-value
# Merge p-values for each condition
a <- c(p1)
# Evaluate p-values
i <- c(a[1] > 0.05, a[1] <= 0.05, a[1] <= 0.01, a[1] <= 0.001, a[1] <= 0.0001)
# Extract significance values from p-values
p1_box <- (names(signif_level[i]))[length((names(signif_level[i])))] # p1
# Plot ----
## SCD ----
f4 <- ggplot(data = df1_sparrow, aes(x = Response, y = SCD, color = Response)) +
geom_violin(show.legend = FALSE, width = 0.6) +
geom_point(show.legend = FALSE, alpha = 0.3) +
geom_rect(xmin = 1, xmax = 2, ymin = 40, ymax = 40, linewidth = 0.1,
show.legend = FALSE, color = "black") +
theme_classic() +
labs(x = NULL, y = "SCD") +
theme(axis.title = element_text(size = 14),
axis.text = element_text(size = 12)) +
coord_cartesian(ylim = c(-5, 42)) +
scale_x_discrete(label = c("Hypersensitive", "Insensitive")) +
scale_color_manual(values = c("#ff0000", "#0c00ff")) +
annotate(geom = "text", x = 1.5, y = 42, label = p1_box)
f4
# Perform shapiro test to check normality
shapiro.test(df1_sparrow[df1_sparrow$Response == "High", ]$pI) # p-value < 0.05 we do not assume normality
shapiro.test(df1_sparrow[df1_sparrow$Response == "Low", ]$pI) # p-value < 0.05 we do not assume normality
# Check homocedasticity
leveneTest(df1_sparrow$pI ~ df1_sparrow$Response) # p-value > 0.05 imply homocedasticity
# Statistics
p1 <- wilcox.test(df1_sparrow$pI ~ df1_sparrow$Response)[[3]] # Extract p-value
# Merge p-values for each condition
a <- c(p1)
# Evaluate p-values
i <- c(a[1] > 0.05, a[1] <= 0.05, a[1] <= 0.01, a[1] <= 0.001, a[1] <= 0.0001)
# Extract significance values from p-values
p1_box <- (names(signif_level[i]))[length((names(signif_level[i])))] # p1
# Plot ----
## pI ----
f5 <- ggplot(data = df1_sparrow, aes(x = Response, y = pI, color = Response)) +
geom_violin(show.legend = FALSE, width = 0.5) +
geom_point(show.legend = FALSE, alpha = 0.3) +
geom_rect(xmin = 1, xmax = 2, ymin = 15.35, ymax = 15.35, linewidth = 0.1,
show.legend = FALSE, color = "black") +
theme_classic() +
labs(x = NULL, y = "pI") +
theme(axis.title = element_text(size = 14),
axis.text = element_text(size = 12)) +
coord_cartesian(ylim = c(3, 16)) +
scale_x_discrete(label = c("Hypersensitive", "Insensitive")) +
scale_color_manual(values = c("#ff0000", "#0c00ff")) +
annotate(geom = "text", x = 1.5, y = 16, label = p1_box)
f5
# Perform shapiro test to check normality
shapiro.test(df1_sparrow[df1_sparrow$Response == "High", ]$asphericity) # p-value > 0.05 we assume normality
shapiro.test(df1_sparrow[df1_sparrow$Response == "Low", ]$asphericity) # p-value > 0.05 we assume normality
# Check homocedasticity
leveneTest(df1_sparrow$asphericity ~ df1_sparrow$Response) # p-value > 0.05 imply homocedasticity
# Statistics
p1 <- t.test(df1_sparrow$asphericity ~ df1_sparrow$Response)[[3]] # Extract p-value
# Merge p-values for each condition
a <- c(p1)
# Evaluate p-values
i <- c(a[1] > 0.05, a[1] <= 0.05, a[1] <= 0.01, a[1] <= 0.001, a[1] <= 0.0001)
# Extract significance values from p-values
p1_box <- (names(signif_level[i]))[length((names(signif_level[i])))] # p1
# Plot ----
## asphericity ----
f6 <- ggplot(data = df1_sparrow, aes(x = Response, y = asphericity, color = Response)) +
geom_violin(show.legend = FALSE, width = 0.5) +
geom_point(show.legend = FALSE, alpha = 0.3) +
geom_rect(xmin = 1, xmax = 2, ymin = 0.54, ymax = 0.54, linewidth = 0.1,
show.legend = FALSE, color = "black") +
theme_classic() +
labs(x = NULL, y = "asphericity") +
theme(axis.title = element_text(size = 14),
axis.text = element_text(size = 12)) +
coord_cartesian(ylim = c(0.35, 0.55)) +
scale_x_discrete(label = c("Hypersensitive", "Insensitive")) +
scale_color_manual(values = c("#ff0000", "#0c00ff")) +
annotate(geom = "text", x = 1.5, y = 0.55, label = p1_box)
f6
# Perform shapiro test to check normality
shapiro.test(df1_sparrow[df1_sparrow$Response == "High", ]$scaling_exponent) # p-value < 0.05 we do not assume normality ***
shapiro.test(df1_sparrow[df1_sparrow$Response == "Low", ]$scaling_exponent) # p-value < 0.05 we do not assume normality ***
# Check homocedasticity
leveneTest(df1_sparrow$scaling_exponent ~ df1_sparrow$Response) # p-value < 0.05 we do not imply homocedasticity ***
# Statistics
p1 <- wilcox.test(df1_sparrow$scaling_exponent ~ df1_sparrow$Response)[[3]] # Extract p-value
# Merge p-values for each condition
a <- c(p1)
# Evaluate p-values
i <- c(a[1] > 0.05, a[1] <= 0.05, a[1] <= 0.01, a[1] <= 0.001, a[1] <= 0.0001)
# Extract significance values from p-values
p1_box <- (names(signif_level[i]))[length((names(signif_level[i])))] # p1
# Plot ----
## scaling exponent ----
f7 <- ggplot(data = df1_sparrow, aes(x = Response, y = scaling_exponent, color = Response)) +
geom_violin(show.legend = FALSE, width = 0.5) +
geom_point(show.legend = FALSE, alpha = 0.3) +
geom_rect(xmin = 1, xmax = 2, ymin = 0.638, ymax = 0.638, linewidth = 0.1,
show.legend = FALSE, color = "black") +
theme_classic() +
labs(x = NULL, y = "v") +
theme(axis.title = element_text(size = 14),
axis.text = element_text(size = 12)) +
coord_cartesian(ylim = c(0.4, 0.65)) +
scale_x_discrete(label = c("Hypersensitive", "Insensitive")) +
scale_color_manual(values = c("#ff0000", "#0c00ff")) +
annotate(geom = "text", x = 1.5, y = 0.65, label = p1_box)
f7
# Perform shapiro test to check normality
shapiro.test(df1_sparrow[df1_sparrow$Response == "High", ]$prefactor) # p-value < 0.05 we do not assume normality
shapiro.test(df1_sparrow[df1_sparrow$Response == "Low", ]$prefactor) # p-value > 0.05 we assume normality
# Check homocedasticity
leveneTest(df1_sparrow$prefactor ~ df1_sparrow$Response) # p-value > 0.05 imply homocedasticity
# Statistics
p1 <- wilcox.test(df1_sparrow$prefactor ~ df1_sparrow$Response)[[3]] # Extract p-value
# Merge p-values for each condition
a <- c(p1)
# Evaluate p-values
i <- c(a[1] > 0.05, a[1] <= 0.05, a[1] <= 0.01, a[1] <= 0.001, a[1] <= 0.0001)
# Extract significance values from p-values
p1_box <- (names(signif_level[i]))[length((names(signif_level[i])))] # p1
# Plot ----
## prefactor ----
f8 <- ggplot(data = df1_sparrow, aes(x = Response, y = prefactor, color = Response)) +
geom_violin(show.legend = FALSE, width = 0.5) +
geom_point(show.legend = FALSE, alpha = 0.3) +
geom_rect(xmin = 1, xmax = 2, ymin = 8.8, ymax = 8.8, linewidth = 0.1,
show.legend = FALSE, color = "black") +
theme_classic() +
labs(x = NULL, y = expression(rho*"0")) +
theme(axis.title = element_text(size = 14),
axis.text = element_text(size = 12)) +
coord_cartesian(ylim = c(5.5, 9)) +
scale_x_discrete(label = c("Hypersensitive", "Insensitive")) +
scale_color_manual(values = c("#ff0000", "#0c00ff")) +
annotate(geom = "text", x = 1.5, y = 9, label = p1_box)
f8
# Merge plots
ggarrange(f1, f2, f3, f4,
f5, f6, f7, f8,
labels = c("a", "b", "c", "d", "e", "f", "g", "h"),
ncol = 4,
nrow = 2)
# Save plot
ggsave(filename = "C:/Users/Cesar/OneDrive/Escritorio/Ext.Fig1/EXFG3/Extended_Data_Fig3.pdf", device = "pdf",
width = 13, height = 6, units = "in", dpi = 450)
ggsave(filename = "C:/Users/Cesar/OneDrive/Escritorio/Ext.Fig1/EXFG3/Extended_Data_Fig3.png", device = "png",
width = 13, height = 6, units = "in", dpi = 450)
# Plot ----
## prefactor ----
f8 <- ggplot(data = df1_sparrow, aes(x = Response, y = prefactor, color = Response)) +
geom_violin(show.legend = FALSE, width = 0.5) +
geom_point(show.legend = FALSE, alpha = 0.3) +
geom_rect(xmin = 1, xmax = 2, ymin = 8.8, ymax = 8.8, linewidth = 0.1,
show.legend = FALSE, color = "black") +
theme_classic() +
labs(x = NULL, y = expression(rho*"0")) +
theme(axis.title = element_text(size = 14),
axis.text = element_text(size = 12)) +
coord_cartesian(ylim = c(5.5, 10)) +
scale_x_discrete(label = c("Hypersensitive", "Insensitive")) +
scale_color_manual(values = c("#ff0000", "#0c00ff")) +
annotate(geom = "text", x = 1.5, y = 9.5, label = p1_box)
f8
# Plot ----
## prefactor ----
f8 <- ggplot(data = df1_sparrow, aes(x = Response, y = prefactor, color = Response)) +
geom_violin(show.legend = FALSE, width = 0.5) +
geom_point(show.legend = FALSE, alpha = 0.3) +
geom_rect(xmin = 1, xmax = 2, ymin = 8.8, ymax = 9.3, linewidth = 0.1,
show.legend = FALSE, color = "black") +
theme_classic() +
labs(x = NULL, y = expression(rho*"0")) +
theme(axis.title = element_text(size = 14),
axis.text = element_text(size = 12)) +
coord_cartesian(ylim = c(5.5, 10)) +
scale_x_discrete(label = c("Hypersensitive", "Insensitive")) +
scale_color_manual(values = c("#ff0000", "#0c00ff")) +
annotate(geom = "text", x = 1.5, y = 9.5, label = p1_box)
f8
# Plot ----
## prefactor ----
f8 <- ggplot(data = df1_sparrow, aes(x = Response, y = prefactor, color = Response)) +
geom_violin(show.legend = FALSE, width = 0.5) +
geom_point(show.legend = FALSE, alpha = 0.3) +
geom_rect(xmin = 1, xmax = 2, ymin = 9.3, ymax = 9.3, linewidth = 0.1,
show.legend = FALSE, color = "black") +
theme_classic() +
labs(x = NULL, y = expression(rho*"0")) +
theme(axis.title = element_text(size = 14),
axis.text = element_text(size = 12)) +
coord_cartesian(ylim = c(5.5, 10)) +
scale_x_discrete(label = c("Hypersensitive", "Insensitive")) +
scale_color_manual(values = c("#ff0000", "#0c00ff")) +
annotate(geom = "text", x = 1.5, y = 9.5, label = p1_box)
f8
# Merge plots
ggarrange(f1, f2, f3, f4,
f5, f6, f7, f8,
labels = c("a", "b", "c", "d", "e", "f", "g", "h"),
ncol = 4,
nrow = 2)
# Save plot
ggsave(filename = "C:/Users/Cesar/OneDrive/Escritorio/Ext.Fig1/EXFG3/Extended_Data_Fig3.pdf", device = "pdf",
width = 13, height = 6, units = "in", dpi = 450)
ggsave(filename = "C:/Users/Cesar/OneDrive/Escritorio/Ext.Fig1/EXFG3/Extended_Data_Fig3.png", device = "png",
width = 13, height = 6, units = "in", dpi = 450)
# Plot ----
## prefactor ----
f8 <- ggplot(data = df1_sparrow, aes(x = Response, y = prefactor, color = Response)) +
geom_violin(show.legend = FALSE, width = 0.5) +
geom_point(show.legend = FALSE, alpha = 0.3) +
geom_rect(xmin = 1, xmax = 2, ymin = 8.8, ymax = 8.8, linewidth = 0.1,
show.legend = FALSE, color = "black") +
theme_classic() +
labs(x = NULL, y = expression(rho*"0")) +
theme(axis.title = element_text(size = 14),
axis.text = element_text(size = 12)) +
coord_cartesian(ylim = c(5.5, 9)) +
scale_x_discrete(label = c("Hypersensitive", "Insensitive")) +
scale_color_manual(values = c("#ff0000", "#0c00ff")) +
annotate(geom = "text", x = 1.5, y = 9, label = p1_box)
f8
# Merge plots
ggarrange(f1, f2, f3, f4,
f5, f6, f7, f8,
labels = c("a", "b", "c", "d", "e", "f", "g", "h"),
ncol = 4,
nrow = 2)
# Save plot
ggsave(filename = "C:/Users/Cesar/OneDrive/Escritorio/Ext.Fig1/EXFG3/Extended_Data_Fig3.pdf", device = "pdf",
width = 13, height = 6, units = "in", dpi = 450)
ggsave(filename = "C:/Users/Cesar/OneDrive/Escritorio/Ext.Fig1/EXFG3/Extended_Data_Fig3.png", device = "png",
width = 13, height = 6, units = "in", dpi = 450)
# Plot ----
## prefactor ----
f8 <- ggplot(data = df1_sparrow, aes(x = Response, y = prefactor, color = Response)) +
geom_violin(show.legend = FALSE, width = 0.5) +
geom_point(show.legend = FALSE, alpha = 0.3) +
geom_rect(xmin = 1, xmax = 2, ymin = 9, ymax = 9, linewidth = 0.1,
show.legend = FALSE, color = "black") +
theme_classic() +
labs(x = NULL, y = expression(rho*"0")) +
theme(axis.title = element_text(size = 14),
axis.text = element_text(size = 12)) +
coord_cartesian(ylim = c(5.5, 9.2)) +
scale_x_discrete(label = c("Hypersensitive", "Insensitive")) +
scale_color_manual(values = c("#ff0000", "#0c00ff")) +
annotate(geom = "text", x = 1.5, y = 9.05, label = p1_box)
f8
# Merge plots
ggarrange(f1, f2, f3, f4,
f5, f6, f7, f8,
labels = c("a", "b", "c", "d", "e", "f", "g", "h"),
ncol = 4,
nrow = 2)
# Save plot
ggsave(filename = "C:/Users/Cesar/OneDrive/Escritorio/Ext.Fig1/EXFG3/Extended_Data_Fig3.pdf", device = "pdf",
width = 13, height = 6, units = "in", dpi = 450)
ggsave(filename = "C:/Users/Cesar/OneDrive/Escritorio/Ext.Fig1/EXFG3/Extended_Data_Fig3.png", device = "png",
width = 13, height = 6, units = "in", dpi = 450)
# Plot ----
## prefactor ----
f8 <- ggplot(data = df1_sparrow, aes(x = Response, y = prefactor, color = Response)) +
geom_violin(show.legend = FALSE, width = 0.5) +
geom_point(show.legend = FALSE, alpha = 0.3) +
geom_rect(xmin = 1, xmax = 2, ymin = 9.05, ymax = 9.05, linewidth = 0.1,
show.legend = FALSE, color = "black") +
theme_classic() +
labs(x = NULL, y = expression(rho*"0")) +
theme(axis.title = element_text(size = 14),
axis.text = element_text(size = 12)) +
coord_cartesian(ylim = c(5.5, 9.2)) +
scale_x_discrete(label = c("Hypersensitive", "Insensitive")) +
scale_color_manual(values = c("#ff0000", "#0c00ff")) +
annotate(geom = "text", x = 1.5, y = 9.1, label = p1_box)
f8
# Merge plots
ggarrange(f1, f2, f3, f4,
f5, f6, f7, f8,
labels = c("a", "b", "c", "d", "e", "f", "g", "h"),
ncol = 4,
nrow = 2)
# Save plot
ggsave(filename = "C:/Users/Cesar/OneDrive/Escritorio/Ext.Fig1/EXFG3/Extended_Data_Fig3.pdf", device = "pdf",
width = 13, height = 6, units = "in", dpi = 450)
ggsave(filename = "C:/Users/Cesar/OneDrive/Escritorio/Ext.Fig1/EXFG3/Extended_Data_Fig3.png", device = "png",
width = 13, height = 6, units = "in", dpi = 450)
